//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/ThisAssets/New/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""PC"",
            ""id"": ""af1e4b63-6511-42f2-b465-de8dfd07ab64"",
            ""actions"": [
                {
                    ""name"": ""OnClick"",
                    ""type"": ""Button"",
                    ""id"": ""342f5797-4275-4ba8-a4e9-681f4b8eede7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""8739dcf5-3dcb-423e-80af-340e0f71a10e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0991133c-a0c8-42c7-bebe-367a38a3ab5d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7de6f0f9-71c3-4339-8e1d-a06f244d2c86"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Android"",
            ""id"": ""83763946-c5cd-4b7a-a8da-f37f9c6c9f3b"",
            ""actions"": [
                {
                    ""name"": ""OnTab"",
                    ""type"": ""Button"",
                    ""id"": ""fb3a3c92-9544-44aa-a267-272335cd88aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TapPosition"",
                    ""type"": ""Value"",
                    ""id"": ""44ffe2de-77c4-4fc4-ab82-2cc058940b59"",
                    ""expectedControlType"": ""Touch"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e94027e7-d25a-4c38-91d8-011a6d8855d7"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnTab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8ae5b16-7fe3-4ea4-9282-68c30a294cb1"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TapPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PC
        m_PC = asset.FindActionMap("PC", throwIfNotFound: true);
        m_PC_OnClick = m_PC.FindAction("OnClick", throwIfNotFound: true);
        m_PC_MousePosition = m_PC.FindAction("MousePosition", throwIfNotFound: true);
        // Android
        m_Android = asset.FindActionMap("Android", throwIfNotFound: true);
        m_Android_OnTab = m_Android.FindAction("OnTab", throwIfNotFound: true);
        m_Android_TapPosition = m_Android.FindAction("TapPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PC
    private readonly InputActionMap m_PC;
    private List<IPCActions> m_PCActionsCallbackInterfaces = new List<IPCActions>();
    private readonly InputAction m_PC_OnClick;
    private readonly InputAction m_PC_MousePosition;
    public struct PCActions
    {
        private @InputSystem m_Wrapper;
        public PCActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnClick => m_Wrapper.m_PC_OnClick;
        public InputAction @MousePosition => m_Wrapper.m_PC_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_PC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PCActions set) { return set.Get(); }
        public void AddCallbacks(IPCActions instance)
        {
            if (instance == null || m_Wrapper.m_PCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PCActionsCallbackInterfaces.Add(instance);
            @OnClick.started += instance.OnOnClick;
            @OnClick.performed += instance.OnOnClick;
            @OnClick.canceled += instance.OnOnClick;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IPCActions instance)
        {
            @OnClick.started -= instance.OnOnClick;
            @OnClick.performed -= instance.OnOnClick;
            @OnClick.canceled -= instance.OnOnClick;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IPCActions instance)
        {
            if (m_Wrapper.m_PCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPCActions instance)
        {
            foreach (var item in m_Wrapper.m_PCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PCActions @PC => new PCActions(this);

    // Android
    private readonly InputActionMap m_Android;
    private List<IAndroidActions> m_AndroidActionsCallbackInterfaces = new List<IAndroidActions>();
    private readonly InputAction m_Android_OnTab;
    private readonly InputAction m_Android_TapPosition;
    public struct AndroidActions
    {
        private @InputSystem m_Wrapper;
        public AndroidActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnTab => m_Wrapper.m_Android_OnTab;
        public InputAction @TapPosition => m_Wrapper.m_Android_TapPosition;
        public InputActionMap Get() { return m_Wrapper.m_Android; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidActions set) { return set.Get(); }
        public void AddCallbacks(IAndroidActions instance)
        {
            if (instance == null || m_Wrapper.m_AndroidActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AndroidActionsCallbackInterfaces.Add(instance);
            @OnTab.started += instance.OnOnTab;
            @OnTab.performed += instance.OnOnTab;
            @OnTab.canceled += instance.OnOnTab;
            @TapPosition.started += instance.OnTapPosition;
            @TapPosition.performed += instance.OnTapPosition;
            @TapPosition.canceled += instance.OnTapPosition;
        }

        private void UnregisterCallbacks(IAndroidActions instance)
        {
            @OnTab.started -= instance.OnOnTab;
            @OnTab.performed -= instance.OnOnTab;
            @OnTab.canceled -= instance.OnOnTab;
            @TapPosition.started -= instance.OnTapPosition;
            @TapPosition.performed -= instance.OnTapPosition;
            @TapPosition.canceled -= instance.OnTapPosition;
        }

        public void RemoveCallbacks(IAndroidActions instance)
        {
            if (m_Wrapper.m_AndroidActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAndroidActions instance)
        {
            foreach (var item in m_Wrapper.m_AndroidActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AndroidActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AndroidActions @Android => new AndroidActions(this);
    public interface IPCActions
    {
        void OnOnClick(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IAndroidActions
    {
        void OnOnTab(InputAction.CallbackContext context);
        void OnTapPosition(InputAction.CallbackContext context);
    }
}
